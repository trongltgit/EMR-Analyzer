import os
from flask import Flask, render_template, request, redirect, url_for
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import load_model
from ydata_profiling import ProfileReport
from werkzeug.utils import secure_filename
import gdown

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 32 * 1024 * 1024  # Gi·ªõi h·∫°n upload file 32MB

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
STATIC_PROFILE_REPORTS = os.path.join(BASE_DIR, 'static', 'profile_reports')
MODELS_DIR = os.path.join(BASE_DIR, 'models')
MODEL_FILENAME = 'best_weights_model.keras'
MODEL_PATH = os.path.join(MODELS_DIR, MODEL_FILENAME)
MODEL_FILE_ID = '1EpAgsWQSXi7CsUO8mEQDGAJyjdfN0T6n'  # ID t·ª´ Google Drive

# T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(STATIC_PROFILE_REPORTS, exist_ok=True)
os.makedirs(MODELS_DIR, exist_ok=True)

model = None

def download_model_from_gdrive():
    """T·∫£i model t·ª´ Google Drive n·∫øu ch∆∞a c√≥"""
    try:
        print("üì• ƒêang t·∫£i model t·ª´ Google Drive...")
        gdown.download(f'https://drive.google.com/uc?id={MODEL_FILE_ID}', MODEL_PATH, quiet=False)
        print(f"‚úÖ T·∫£i model th√†nh c√¥ng: {MODEL_PATH}")
        return os.path.exists(MODEL_PATH)
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i model t·ª´ Google Drive: {e}")
        return False

def merge_model_parts():
    """Gh√©p c√°c ph·∫ßn .keras.001, .keras.002,... th√†nh file .keras"""
    part_files = sorted([
        f for f in os.listdir(MODELS_DIR)
        if f.startswith(MODEL_FILENAME + ".")
    ])
    if not part_files:
        print("‚ö†Ô∏è Kh√¥ng th·∫•y c√°c ph·∫ßn model.")
        return False

    try:
        with open(MODEL_PATH, 'wb') as outfile:
            for part in part_files:
                with open(os.path.join(MODELS_DIR, part), 'rb') as pf:
                    while True:
                        chunk = pf.read(1024 * 1024)
                        if not chunk:
                            break
                        outfile.write(chunk)
        print(f"‚úÖ Gh√©p model th√†nh c√¥ng: {MODEL_PATH}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi gh√©p model: {e}")
        return False

def try_load_model():
    """T·∫£i m√¥ h√¨nh n·∫øu ƒë√£ merge ho·∫∑c t·ª´ Google Drive"""
    global model

    print(f"üîç Ki·ªÉm tra model ·ªü: {MODEL_PATH}")
    if os.path.exists(MODEL_PATH):
        print("üì¶ File model ƒë√£ t·ªìn t·∫°i.")
    else:
        print("‚ö†Ô∏è File model ch∆∞a t·ªìn t·∫°i. Th·ª≠ merge c√°c ph·∫ßn...")
        if not merge_model_parts():
            print("‚ö†Ô∏è Merge th·∫•t b·∫°i. Th·ª≠ t·∫£i t·ª´ Google Drive...")
            if not download_model_from_gdrive():
                print("‚ùå Kh√¥ng th·ªÉ l·∫•y model.")
                model = None
                return

    try:
        model = load_model(MODEL_PATH)
        print("‚úÖ Load model th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi load model: {e}")
        model = None

try_load_model()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/dashboard')
def dashboard():
    return render_template('dashboard.html')

@app.route("/check-model")
def check_model():
    if os.path.exists(MODEL_PATH):
        return "‚úÖ File t·ªìn t·∫°i!"
    return "‚ùå Kh√¥ng t√¨m th·∫•y file!"

@app.route('/emr_profile.html', methods=['GET', 'POST'])
def emr_profile():
    error = None
    if request.method == 'POST':
        file = request.files.get('file')
        if not file:
            return render_template("emr_profile.html", error="Vui l√≤ng ch·ªçn file.")

        filename = secure_filename(file.filename)
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)

        try:
            if filename.lower().endswith('.csv'):
                df = pd.read_csv(filepath)
            elif filename.lower().endswith(('.xls', '.xlsx')):
                df = pd.read_excel(filepath)
            else:
                return render_template("emr_profile.html", error="File kh√¥ng h·ª£p l·ªá (.csv, .xls, .xlsx).")

            if df.shape[0] > 100_000 or df.shape[1] > 100:
                error = "File qu√° l·ªõn (h∆°n 100.000 d√≤ng ho·∫∑c 100 c·ªôt)."
                return render_template("emr_profile.html", error=error)

            profile = ProfileReport(df, title="EMR Report", minimal=True)
            report_path = os.path.join(STATIC_PROFILE_REPORTS, 'report.html')
            profile.to_file(report_path)
            return redirect(url_for('static', filename='profile_reports/report.html'))
        except Exception as e:
            error = f"L·ªói khi ph√¢n t√≠ch: {e}"

    return render_template("emr_profile.html", error=error)

@app.route('/emr_prediction.html', methods=['GET', 'POST'])
def emr_prediction():
    prediction = None
    error = None

    if request.method == 'POST':
        file = request.files.get('file')
        if not file:
            error = "Vui l√≤ng ch·ªçn ·∫£nh."
            return render_template("emr_prediction.html", prediction=prediction, error=error)

        global model
        if model is None:
            try_load_model()
        if model is None:
            error = (
                f"Model ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c kh√¥ng t·ªìn t·∫°i ({MODEL_PATH}).<br>"
                "H√£y ki·ªÉm tra l·∫°i log server, ƒë·∫£m b·∫£o ƒë√£ upload c√°c ph·∫ßn ho·∫∑c b·∫≠t internet ƒë·ªÉ t·∫£i model."
            )
            return render_template("emr_prediction.html", prediction=prediction, error=error)

        filename = secure_filename(file.filename)
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)

        try:
            img = tf.keras.preprocessing.image.load_img(filepath, target_size=(224, 224))
            img_array = tf.keras.preprocessing.image.img_to_array(img)
            img_array = tf.expand_dims(img_array, axis=0) / 255.0
            pred = model.predict(img_array)
            prediction = "Nodule" if pred[0][0] > 0.5 else "Non-Nodule"
        except Exception as e:
            error = f"L·ªói khi d·ª± ƒëo√°n: {e}"

    return render_template("emr_prediction.html", prediction=prediction, error=error)

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
