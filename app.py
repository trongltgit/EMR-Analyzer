import os
import shutil
import numpy as np
import tensorflow as tf
from flask import Flask, request, jsonify, render_template
from tensorflow.keras.models import load_model as keras_load_model
from flask_cors import CORS
from PIL import Image
import gdown
import logging
from retrying import retry
import py7zr

# C·∫•u h√¨nh logging (ghi log v√†o file server.log)
logging.basicConfig(level=logging.DEBUG, filename="server.log",
                    format="%(asctime)s - %(levelname)s - %(message)s")

app = Flask(__name__)
CORS(app)  # Cho ph√©p t·∫•t c·∫£ origin

# C·∫•u h√¨nh th√¥ng s·ªë cho model
MODEL_FILE_ID = "1EpAgsWQSXi7CsUO8mEQDGAJyjdfN0T6n"
MODEL_FILE_NAME = "best_weights_model.keras"
# L∆∞u √Ω: ƒê·∫£m b·∫£o MODEL_DIR ch·ª©a ƒë√∫ng ƒë∆∞·ªùng d·∫´n m√† b·∫°n deploy (·ªü ƒë√¢y l√† th∆∞ m·ª•c trong Drive)
MODEL_DIR = "./MyDrive/efficientnet/efficientnet"
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_FILE_NAME)
model = None

@retry(stop_max_attempt_number=3, wait_fixed=2000)
def download_model_gdown(url, output):
    gdown.download(url, output, quiet=False)

def assemble_model():
    """
    Gh√©p c√°c file .7z ƒë√£ chia nh·ªè v√† gi·∫£i n√©n ƒë·ªÉ l·∫•y file model g·ªëc.
    """
    global model
    try:
        # Danh s√°ch c√°c file split trong th∆∞ m·ª•c MODEL_DIR
        segments = [os.path.join(MODEL_DIR, f"best_weights_model.7z.00{i}") for i in range(1, 5)]
        logging.info("Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c file split: %s", segments)
        for seg in segments:
            if not os.path.exists(seg):
                logging.error("Kh√¥ng t√¨m th·∫•y file split: %s", seg)
                return
        # Gh√©p c√°c file split th√†nh file archive ho√†n ch·ªânh
        assembled_archive = os.path.join(MODEL_DIR, "best_weights_model.7z")
        with open(assembled_archive, 'wb') as outfile:
            for seg in segments:
                with open(seg, 'rb') as infile:
                    shutil.copyfileobj(infile, outfile)
        logging.info("Gh√©p file .7z th√†nh c√¥ng. B·∫Øt ƒë·∫ßu gi·∫£i n√©n b·∫±ng py7zr...")

        # Gi·∫£i n√©n file archive b·∫±ng py7zr
        with py7zr.SevenZipFile(assembled_archive, mode='r') as archive:
            archive.extractall(path=MODEL_DIR)
        extracted_model = os.path.join(MODEL_DIR, MODEL_FILE_NAME)
        model = keras_load_model(extracted_model)
        logging.info("Model ƒë∆∞·ª£c load th√†nh c√¥ng t·ª´ file gi·∫£i n√©n!")
    except Exception as e:
        logging.error("L·ªói khi gh√©p ho·∫∑c load model: %s", str(e))
        model = None

def download_model():
    """
    T·∫£i model t·ª´ Google Drive n·∫øu ch∆∞a c√≥. N·∫øu th·∫•t b·∫°i, chuy·ªÉn sang gh√©p file .7z.
    """
    if not os.path.exists(MODEL_DIR):
        os.makedirs(MODEL_DIR, exist_ok=True)
    if not os.path.isfile(MODEL_PATH):
        try:
            logging.info("üåê ƒêang t·∫£i model t·ª´ Google Drive...")
            url = f"https://drive.google.com/uc?id={MODEL_FILE_ID}"
            download_model_gdown(url, MODEL_PATH)
            logging.info("‚úÖ T·∫£i model t·ª´ Drive th√†nh c√¥ng!")
        except Exception as e:
            logging.warning("‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c model t·ª´ Drive: %s", e)
            assemble_model()

def initialize_model():
    """
    Kh·ªüi ƒë·ªông (load) model v√†o b·ªô nh·ªõ.
    """
    global model
    if model is None:
        download_model()
        # N·∫øu c√≥ file model c·ª•c b·ªô nh∆∞ng model ch∆∞a ƒë∆∞·ª£c load, th·ª≠ load l·∫°i
        if model is None and os.path.isfile(MODEL_PATH):
            try:
                logging.info("üöÄ ƒêang load model t·ª´ file c·ª•c b·ªô...")
                model = keras_load_model(MODEL_PATH)
                logging.info("‚úÖ Model ƒë√£ ƒë∆∞·ª£c load v√†o b·ªô nh·ªõ!")
            except Exception as e:
                logging.error("L·ªói khi load model c·ª•c b·ªô: %s", e)

# Load model khi kh·ªüi ƒë·ªông server
initialize_model()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/dashboard')
def dashboard():
    return render_template('dashboard.html')

@app.route('/predict', methods=['POST'])
def predict():
    global model
    try:
        if model is None:
            initialize_model()
            if model is None:
                logging.error("Model kh√¥ng ƒë∆∞·ª£c load")
                return jsonify({'error': 'Kh√¥ng th·ªÉ t·∫£i model. Vui l√≤ng th·ª≠ l·∫°i sau.'}), 503

        if 'image' not in request.files:
            return jsonify({'error': 'Kh√¥ng c√≥ file ·∫£nh trong request!'}), 400

        file = request.files['image']
        if file.filename == '':
            return jsonify({'error': 'T√™n file ·∫£nh kh√¥ng h·ª£p l·ªá!'}), 400

        # X·ª≠ l√Ω ·∫£nh: chuy·ªÉn sang RGB v√† resize v·ªÅ 224x224
        img = Image.open(file).convert('RGB').resize((224, 224))
        x = np.expand_dims(np.array(img) / 255.0, axis=0)
        img.close()
        preds = model.predict(x)[0][0]
        cls = 'Nodule' if preds > 0.5 else 'Non-Nodule'
        return jsonify({'classification': cls, 'score': float(preds)})
    except Exception as e:
        logging.error("L·ªói khi th·ª±c hi·ªán d·ª± ƒëo√°n: %s", str(e), exc_info=True)
        return jsonify({'error': f'L·ªói khi x·ª≠ l√Ω ·∫£nh ho·∫∑c d·ª± ƒëo√°n: {str(e)}'}), 500

# --- Th√™m error handlers ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ JSON ---
@app.errorhandler(404)
def not_found(e):
    return jsonify({"error": "Trang kh√¥ng t·ªìn t·∫°i."}), 404

@app.errorhandler(500)
def internal_error(e):
    return jsonify({"error": "L·ªói m√°y ch·ªß n·ªôi b·ªô."}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)
